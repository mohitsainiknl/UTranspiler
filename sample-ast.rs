File { shebang: None, attrs: [], items: [Struct(ItemStruct { attrs: [Attribute { pound_token: Pound, style: Outer, bracket_token: Bracket, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(derive), arguments: None }] }, tokens: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: Debug }] }] }], vis: Public(VisPublic { pub_token: Pub }), struct_token: Struct, ident: Ident(_Local), generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, fields: Named(FieldsNamed { brace_token: Brace, named: [Field { attrs: [Attribute { pound_token: Pound, style: Outer, bracket_token: Bracket, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(derive), arguments: None }] }, tokens: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: Debug }] }] }], vis: Public(VisPublic { pub_token: Pub }), ident: Some(Ident(attrs)), colon_token: Some(Colon), ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: None }] } }) }, Comma, Field { attrs: [], vis: Public(VisPublic { pub_token: Pub }), ident: Some(Ident(pat)), colon_token: Some(Colon), ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: None }] } }) }, Comma] }), semi_token: None })] }